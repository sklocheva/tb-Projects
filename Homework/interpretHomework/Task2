.Extend the interpreter to supported the following commands:

    get
    set
    calc
  
- **The `get` command** has the following syntax:

		get <variable>

	It obtains the value of the given variable and prints it out in the format:

		[<type>] <value>
	(please see the example at the end).

- **The `set` command** has the following syntax:
		
		set <variable> <type> <value>
	
	The command creates a value of the given type and stores it in the given variable. </br>
	The output of the command is the string "Ok".
	
- **The `calc` command** has the following syntax:
	
		calc <variable1> <variable2> <operation> <variable3>

	The command performs a simplistic operation between variable2 and variable3 and stores the result in variable1. The supported operations are listed below.

	The output of the command is the string "Ok".

	In all cases if an error occurs during the execution of the command (for example there is no such variable or the value type does not support the operation), the string "Err" is printed instead of the normal output.

	The possible types of the values are the following:
	- string
	- number

	The textual representation of the values (e.g. their input format for the "set" command or the output format for the "get" command) is the same as supported by Java.

	The operations supported by these types are the following:
	- `<string>`
		- `+ <string>` concatenates the two strings
		- `+ <number>` adds the number as a string to the end
		- `* <number>` repeats the string a <number> times
	- `<number>`
		- `+ <number>` adds the two numbers
		- `- <number>` subtracts the two numbers
		- `* <number>` multiplies the two numbers
	- `<date>`
		- `+ <number>` adds a `<number>` of days
		- `- <number>` subtracts a <number> of days
	
	Example:

		set humpty string alice
		Ok
		get humpty
		[string] alice
		get dumpty
		Err
		set iter number 5
		Ok
		calc humpty humpty + iter
		Ok
		get humpty
		[string] alice5